package com.app.repository;

import org.springframework.stereotype.Repository;

import jakarta.persistence.*;
import jakarta.transaction.*;

@Transactional
@Repository
public class UserRepository {
	
	
	@PersistenceContext
	private EntityManager entityManager;

	
	@Override
	public List<User> getUsers() {
		
		String hql = "FROM Book as atcl ORDER BY atcl.id";
		return (List<User>) entityManager.createQuery(hql).getResultList();
	}


	@Override
	public User getUser(int userId) {
		
		return entityManager.find(User.class, userId);
	}

	@Override
	public User createUser(User model) {
		entityManager.persist(model);
		User b = getLastInsertedUser();
		return b;
	}

	@Override
	public User updateUser(int userId, User user) {
		
		
		User UserFromDB = getUser(UserId);
		UserFromDB.setName(User.getName());
		UserFromDB.setAuthor(User.getAuthor());
		UserFromDB.setCategory(User.getCategory());
		UserFromDB.setPublication(User.getPublication());
		UserFromDB.setPages(User.getPages());
		UserFromDB.setPrice(User.getPrice());
		
		entityManager.flush();
		
		//again i am taking updated result of book and returning the book object
		User updatedUser = getUser(userId);
		
		return updatedUser;
	}

	/**
	 * This method is responsible for deleting a particular(which id will be passed that record) 
	 * record from the database
	 */
	@Override
	public boolean deleteUser(int UserId) {
		User user = getUser(UserId);
		entityManager.remove(User);
		
		//we are checking here that whether entityManager contains earlier deleted book or not
		// if contains then book is not deleted from DB that's why returning false;
		boolean status = entityManager.contains(User);
		if(status){
			return false;
		}
		return true;
	}
	
	/**
	 * This method will get the latest inserted record from the database and return the object of Book class
	 * @return book
	 */
	private User getLastInsertedUser(){
		String hql = "from Book order by id DESC";
		Query query = entityManager.createQuery(hql);
		query.setMaxResults(1);
		User User = (User)query.getSingleResult();
		return User;
	}
}
